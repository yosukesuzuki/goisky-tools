(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var BuildForm, BuildFormList, BuildFormUpdate, SetPostData, appStoreOptions, appStores, iOSAppSchema, key, schemas, value;

document.addEventListener("DOMContentLoaded", function(event) {
  var pathName;
  console.log("DOM fully loaded and parsed");
  pathName = location.pathname.split("/")[2];
  switch (pathName) {
    case "form":
      BuildForm();
      window.onhashchange = BuildForm;
  }
});

BuildForm = function() {
  var crudMethod, hashArr, keyName, modelName, schema;
  hashArr = location.hash.split("/");
  modelName = hashArr[1];
  crudMethod = hashArr[2];
  keyName = hashArr[3];
  schema = schemas[modelName];
  switch (crudMethod) {
    case "update":
      return BuildFormUpdate(schema, keyName);
    case "list":
      return BuildFormList(schema);
  }
};

SetPostData = function(items) {
  var returnObject, v, _i, _len;
  returnObject = {};
  for (_i = 0, _len = items.length; _i < _len; _i++) {
    v = items[_i];
    returnObject[v.fieldName] = v.fieldValue;
  }
  return returnObject;
};

BuildFormUpdate = function(schema, keyName) {
  var formVue, request;
  formVue = new Vue({
    el: "#form-container",
    template: "#formTemplate",
    data: {
      formTitle: schema.formTitle,
      items: schema.schema
    },
    methods: {
      cancel: function(e) {
        return location.hash = "/" + schema.modelName + "/list";
      },
      submitUpdate: function(e) {
        var request;
        e.preventDefault();
        request = window.superagent;
        return request.post(schema.apiEndpoint).send(SetPostData(this.$data.items)).set("Accept", "application/json").end(function(error, res) {
          var items;
          if (error == null) {
            items = res.body;
            console.log(items);
            return location.hash = "/" + schema.modelName + "/list";
          }
        });
      }
    }
  });
  if (keyName) {
    request = window.superagent;
    return request.get(schema.apiEndpoint + "/" + keyName, function(res) {
      var data, v, _i, _len, _ref, _results;
      data = res.body;
      _ref = formVue.$data.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.fieldValue = data[v.fieldName]);
      }
      return _results;
    });
  }
};

BuildFormList = function(schema) {
  var listVue, request;
  listVue = new Vue({
    el: "#form-container",
    template: "#listTemplate",
    data: {
      formTitle: schema.formTitle,
      formDescription: schema.formDescription,
      modelName: schema.modelName,
      items: []
    },
    methods: {
      deleteEntity: function(e) {
        var keyName, request;
        if (window.confirm('Delete this entity?')) {
          keyName = e.targetVM.$data.app_id;
          request = window.superagent;
          return request.del(schema.apiEndpoint + "/" + keyName, function(res) {
            var items;
            items = res.body;
            return listVue.$data.items.$remove(e.targetVM.$index);
          });
        }
      }
    }
  });
  request = window.superagent;
  return request.get(schema.apiEndpoint, function(res) {
    var items;
    items = res.body;
    return listVue.$data.items = items.items;
  });
};

Vue.filter("dateFormat", function(value) {
  var localTime;
  value = value.replace(/T/, " ");
  localTime = moment.utc(value.slice(0, 16)).toDate();
  localTime = moment(localTime).format("YYYY-MM-DD HH:mm (Z)");
  return localTime;
});

Vue.filter("dateFormatUTC", function(value) {
  value = value.replace(/T/, " ");
  return value.slice(0, 16);
});

appStores = {
  Argentina: 143505,
  Australia: 143460,
  Belgium: 143446,
  Brazil: 143503,
  Canada: 143455,
  Chile: 143483,
  China: 143465,
  Colombia: 143501,
  "Costa Rica": 143495,
  Croatia: 143494,
  "Czech Republic": 143489,
  Denmark: 143458,
  Deutschland: 143443,
  "El Salvador": 143506,
  Espana: 143454,
  Finland: 143447,
  France: 143442,
  Greece: 143448,
  Guatemala: 143504,
  "Hong Kong": 143463,
  Hungary: 143482,
  India: 143467,
  Indonesia: 143476,
  Ireland: 143449,
  Israel: 143491,
  Italia: 143450,
  Korea: 143466,
  Kuwait: 143493,
  Lebanon: 143497,
  Luxembourg: 143451,
  Malaysia: 143473,
  Mexico: 143468,
  Nederland: 143452,
  "New Zealand": 143461,
  Norway: 143457,
  Osterreich: 143445,
  Pakistan: 143477,
  Panama: 143485,
  Peru: 143507,
  Phillipines: 143474,
  Poland: 143478,
  Portugal: 143453,
  Qatar: 143498,
  Romania: 143487,
  Russia: 143469,
  "Saudi Arabia": 143479,
  "Schweiz/Suisse": 143459,
  Singapore: 143464,
  Slovakia: 143496,
  Slovenia: 143499,
  "South Africa": 143472,
  "Sri Lanka": 143486,
  Sweden: 143456,
  Taiwan: 143470,
  Thailand: 143475,
  Turkey: 143480,
  "United Arab Emirates": 143481,
  "United Kingdom": 143444,
  "United States": 143441,
  Venezuela: 143502,
  Vietnam: 143471,
  Japan: 143462,
  "Dominican Republic": 143508,
  Ecuador: 143509,
  Egypt: 143516,
  Estonia: 143518,
  Honduras: 143510,
  Jamaica: 143511,
  Kazakhstan: 143517,
  Latvia: 143519,
  Lithuania: 143520,
  Macau: 143515,
  Malta: 143521,
  Moldova: 143523,
  Nicaragua: 143512,
  Paraguay: 143513,
  Uruguay: 143514
};

appStoreOptions = [];

for (key in appStores) {
  value = appStores[key];
  appStoreOptions.push({
    text: key,
    value: value
  });
}

iOSAppSchema = [
  {
    fieldTitle: "Application ID",
    fieldName: "app_id",
    fieldType: "inputtext",
    fieldValue: ""
  }, {
    fieldTitle: "Title",
    fieldName: "title",
    fieldType: "inputtext",
    fieldValue: ""
  }, {
    fieldTitle: "Webhook URL",
    fieldName: "webhook_url",
    fieldType: "inputtext",
    fieldValue: ""
  }, {
    fieldTitle: "Description",
    fieldName: "content",
    fieldType: "textarea",
    fieldValue: ""
  }, {
    fieldTitle: "Region",
    fieldName: "region",
    fieldType: "select",
    options: appStoreOptions,
    fieldValue: ""
  }
];

schemas = {
  iosapp: {
    schema: iOSAppSchema,
    modelName: "iosapp",
    apiEndpoint: "/admin/api/v1/iosapp",
    formTitle: "AppStore App settings",
    formDescription: "When a review is posted to AppStore, notification is send to your slack channel"
  }
};



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdXp1a2l5b3N1a2UvZGV2L3NsYWNrLXRvb2xzL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9zdXp1a2l5b3N1a2UvZGV2L3NsYWNrLXRvb2xzL3NyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLHFIQUFBOztBQUFBLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsU0FBQyxLQUFELEdBQUE7QUFDNUMsTUFBQSxRQUFBO0FBQUEsRUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLDZCQUFaLENBQUEsQ0FBQTtBQUFBLEVBQ0EsUUFBQSxHQUFXLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBbEIsQ0FBd0IsR0FBeEIsQ0FBNkIsQ0FBQSxDQUFBLENBRHhDLENBQUE7QUFFQSxVQUFPLFFBQVA7QUFBQSxTQUNPLE1BRFA7QUFFSSxNQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxNQUNBLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLFNBRHRCLENBRko7QUFBQSxHQUg0QztBQUFBLENBQTlDLENBQUEsQ0FBQTs7QUFBQSxTQVNBLEdBQVksU0FBQSxHQUFBO0FBQ1YsTUFBQSwrQ0FBQTtBQUFBLEVBQUEsT0FBQSxHQUFVLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBZCxDQUFvQixHQUFwQixDQUFWLENBQUE7QUFBQSxFQUNBLFNBQUEsR0FBWSxPQUFRLENBQUEsQ0FBQSxDQURwQixDQUFBO0FBQUEsRUFFQSxVQUFBLEdBQWEsT0FBUSxDQUFBLENBQUEsQ0FGckIsQ0FBQTtBQUFBLEVBR0EsT0FBQSxHQUFVLE9BQVEsQ0FBQSxDQUFBLENBSGxCLENBQUE7QUFBQSxFQUlBLE1BQUEsR0FBUyxPQUFRLENBQUEsU0FBQSxDQUpqQixDQUFBO0FBS0EsVUFBTyxVQUFQO0FB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biBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKGV2ZW50KSAtPlxuICBjb25zb2xlLmxvZyBcIkRPTSBmdWxseSBsb2FkZWQgYW5kIHBhcnNlZFwiXG4gIHBhdGhOYW1lID0gbG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoXCIvXCIpWzJdXG4gIHN3aXRjaCBwYXRoTmFtZVxuICAgIHdoZW4gXCJmb3JtXCJcbiAgICAgIEJ1aWxkRm9ybSgpXG4gICAgICB3aW5kb3cub25oYXNoY2hhbmdlID0gQnVpbGRGb3JtXG4gIHJldHVyblxuXG5CdWlsZEZvcm0gPSAtPlxuICBoYXNoQXJyID0gbG9jYXRpb24uaGFzaC5zcGxpdChcIi9cIilcbiAgbW9kZWxOYW1lID0gaGFzaEFyclsxXVxuICBjcnVkTWV0aG9kID0gaGFzaEFyclsyXVxuICBrZXlOYW1lID0gaGFzaEFyclszXVxuICBzY2hlbWEgPSBzY2hlbWFzW21vZGVsTmFtZV1cbiAgc3dpdGNoIGNydWRNZXRob2RcbiAgICB3aGVuIFwidXBkYXRlXCIgdGhlbiBCdWlsZEZvcm1VcGRhdGUoc2NoZW1hLGtleU5hbWUpXG4gICAgd2hlbiBcImxpc3RcIiB0aGVuIEJ1aWxkRm9ybUxpc3Qoc2NoZW1hKVxuXG5TZXRQb3N0RGF0YSA9IChpdGVtcykgLT5cbiAgcmV0dXJuT2JqZWN0ID0ge31cbiAgZm9yIHYgaW4gaXRlbXNcbiAgICByZXR1cm5PYmplY3Rbdi5maWVsZE5hbWVdID0gdi5maWVsZFZhbHVlXG4gIHJldHVybiByZXR1cm5PYmplY3RcblxuQnVpbGRGb3JtVXBkYXRlID0gKHNjaGVtYSxrZXlOYW1lKSAtPlxuICBmb3JtVnVlID0gbmV3IFZ1ZShcbiAgICBlbDogXCIjZm9ybS1jb250YWluZXJcIlxuICAgIHRlbXBsYXRlOiBcIiNmb3JtVGVtcGxhdGVcIlxuICAgIGRhdGE6XG4gICAgICBmb3JtVGl0bGU6IHNjaGVtYS5mb3JtVGl0bGVcbiAgICAgIGl0ZW1zOiBzY2hlbWEuc2NoZW1hXG4gICAgbWV0aG9kczpcbiAgICAgIGNhbmNlbDogKGUpIC0+XG4gICAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIi9cIitzY2hlbWEubW9kZWxOYW1lK1wiL2xpc3RcIlxuICAgICAgc3VibWl0VXBkYXRlOiAoZSkgLT5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHJlcXVlc3QgPSB3aW5kb3cuc3VwZXJhZ2VudFxuICAgICAgICByZXF1ZXN0LnBvc3Qoc2NoZW1hLmFwaUVuZHBvaW50KVxuICAgICAgICAgIC5zZW5kKFNldFBvc3REYXRhKEAkZGF0YS5pdGVtcykpXG4gICAgICAgICAgLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcbiAgICAgICAgICAuZW5kIChlcnJvciwgcmVzKSAtPlxuICAgICAgICAgICAgdW5sZXNzIGVycm9yP1xuICAgICAgICAgICAgICBpdGVtcyA9IHJlcy5ib2R5XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nIGl0ZW1zXG4gICAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIi9cIitzY2hlbWEubW9kZWxOYW1lK1wiL2xpc3RcIlxuICApXG4gIGlmIGtleU5hbWVcbiAgICByZXF1ZXN0ID0gd2luZG93LnN1cGVyYWdlbnRcbiAgICByZXF1ZXN0LmdldCBzY2hlbWEuYXBpRW5kcG9pbnQrXCIvXCIra2V5TmFtZSwgKHJlcykgLT5cbiAgICAgIGRhdGEgPSByZXMuYm9keVxuICAgICAgZm9yIHYgaW4gZm9ybVZ1ZS4kZGF0YS5pdGVtc1xuICAgICAgICB2LmZpZWxkVmFsdWUgPSBkYXRhW3YuZmllbGROYW1lXVxuXG5cbkJ1aWxkRm9ybUxpc3QgPSAoc2NoZW1hKSAtPlxuICBsaXN0VnVlID0gbmV3IFZ1ZShcbiAgICBlbDogXCIjZm9ybS1jb250YWluZXJcIlxuICAgIHRlbXBsYXRlOiBcIiNsaXN0VGVtcGxhdGVcIlxuICAgIGRhdGE6XG4gICAgICBmb3JtVGl0bGU6IHNjaGVtYS5mb3JtVGl0bGVcbiAgICAgIGZvcm1EZXNjcmlwdGlvbjogc2NoZW1hLmZvcm1EZXNjcmlwdGlvblxuICAgICAgbW9kZWxOYW1lOiBzY2hlbWEubW9kZWxOYW1lXG4gICAgICBpdGVtczogW11cbiAgICBtZXRob2RzOlxuICAgICAgZGVsZXRlRW50aXR5OiAoZSkgLT5cbiAgICAgICAgaWYgd2luZG93LmNvbmZpcm0oJ0RlbGV0ZSB0aGlzIGVudGl0eT8nKVxuICAgICAgICAgIGtleU5hbWUgPSBlLnRhcmdldFZNLiRkYXRhLmFwcF9pZFxuICAgICAgICAgIHJlcXVlc3QgPSB3aW5kb3cuc3VwZXJhZ2VudFxuICAgICAgICAgIHJlcXVlc3QuZGVsIHNjaGVtYS5hcGlFbmRwb2ludCtcIi9cIitrZXlOYW1lLCAocmVzKSAtPlxuICAgICAgICAgICAgaXRlbXMgPSByZXMuYm9keVxuICAgICAgICAgICAgbGlzdFZ1ZS4kZGF0YS5pdGVtcy4kcmVtb3ZlKGUudGFyZ2V0Vk0uJGluZGV4KVxuICApXG4gIHJlcXVlc3QgPSB3aW5kb3cuc3VwZXJhZ2VudFxuICByZXF1ZXN0LmdldCBzY2hlbWEuYXBpRW5kcG9pbnQsIChyZXMpIC0+XG4gICAgaXRlbXMgPSByZXMuYm9keVxuICAgIGxpc3RWdWUuJGRhdGEuaXRlbXMgPSBpdGVtcy5pdGVtc1xuXG5WdWUuZmlsdGVyIFwiZGF0ZUZvcm1hdFwiLCAodmFsdWUpIC0+XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvVC8sIFwiIFwiKVxuICBsb2NhbFRpbWUgPSBtb21lbnQudXRjKHZhbHVlLnNsaWNlKDAsIDE2KSkudG9EYXRlKClcbiAgbG9jYWxUaW1lID0gbW9tZW50KGxvY2FsVGltZSkuZm9ybWF0KFwiWVlZWS1NTS1ERCBISDptbSAoWilcIilcbiAgbG9jYWxUaW1lXG5cblZ1ZS5maWx0ZXIgXCJkYXRlRm9ybWF0VVRDXCIsICh2YWx1ZSkgLT5cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9ULywgXCIgXCIpXG4gIHZhbHVlLnNsaWNlIDAsIDE2XG5cbmFwcFN0b3JlcyA9XG4gIEFyZ2VudGluYTogMTQzNTA1XG4gIEF1c3RyYWxpYTogMTQzNDYwXG4gIEJlbGdpdW06IDE0MzQ0NlxuICBCcmF6aWw6IDE0MzUwM1xuICBDYW5hZGE6IDE0MzQ1NVxuICBDaGlsZTogMTQzNDgzXG4gIENoaW5hOiAxNDM0NjVcbiAgQ29sb21iaWE6IDE0MzUwMVxuICBcIkNvc3RhIFJpY2FcIjogMTQzNDk1XG4gIENyb2F0aWE6IDE0MzQ5NFxuICBcIkN6ZWNoIFJlcHVibGljXCI6IDE0MzQ4OVxuICBEZW5tYXJrOiAxNDM0NThcbiAgRGV1dHNjaGxhbmQ6IDE0MzQ0M1xuICBcIkVsIFNhbHZhZG9yXCI6IDE0MzUwNlxuICBFc3BhbmE6IDE0MzQ1NFxuICBGaW5sYW5kOiAxNDM0NDdcbiAgRnJhbmNlOiAxNDM0NDJcbiAgR3JlZWNlOiAxNDM0NDhcbiAgR3VhdGVtYWxhOiAxNDM1MDRcbiAgXCJIb25nIEtvbmdcIjogMTQzNDYzXG4gIEh1bmdhcnk6IDE0MzQ4MlxuICBJbmRpYTogMTQzNDY3XG4gIEluZG9uZXNpYTogMTQzNDc2XG4gIElyZWxhbmQ6IDE0MzQ0OVxuICBJc3JhZWw6IDE0MzQ5MVxuICBJdGFsaWE6IDE0MzQ1MFxuICBLb3JlYTogMTQzNDY2XG4gIEt1d2FpdDogMTQzNDkzXG4gIExlYmFub246IDE0MzQ5N1xuICBMdXhlbWJvdXJnOiAxNDM0NTFcbiAgTWFsYXlzaWE6IDE0MzQ3M1xuICBNZXhpY286IDE0MzQ2OFxuICBOZWRlcmxhbmQ6IDE0MzQ1MlxuICBcIk5ldyBaZWFsYW5kXCI6IDE0MzQ2MVxuICBOb3J3YXk6IDE0MzQ1N1xuICBPc3RlcnJlaWNoOiAxNDM0NDVcbiAgUGFraXN0YW46IDE0MzQ3N1xuICBQYW5hbWE6IDE0MzQ4NVxuICBQZXJ1OiAxNDM1MDdcbiAgUGhpbGxpcGluZXM6IDE0MzQ3NFxuICBQb2xhbmQ6IDE0MzQ3OFxuICBQb3J0dWdhbDogMTQzNDUzXG4gIFFhdGFyOiAxNDM0OThcbiAgUm9tYW5pYTogMTQzNDg3XG4gIFJ1c3NpYTogMTQzNDY5XG4gIFwiU2F1ZGkgQXJhYmlhXCI6IDE0MzQ3OVxuICBcIlNjaHdlaXovU3Vpc3NlXCI6IDE0MzQ1OVxuICBTaW5nYXBvcmU6IDE0MzQ2NFxuICBTbG92YWtpYTogMTQzNDk2XG4gIFNsb3ZlbmlhOiAxNDM0OTlcbiAgXCJTb3V0aCBBZnJpY2FcIjogMTQzNDcyXG4gIFwiU3JpIExhbmthXCI6IDE0MzQ4NlxuICBTd2VkZW46IDE0MzQ1NlxuICBUYWl3YW46IDE0MzQ3MFxuICBUaGFpbGFuZDogMTQzNDc1XG4gIFR1cmtleTogMTQzNDgwXG4gIFwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIjogMTQzNDgxXG4gIFwiVW5pdGVkIEtpbmdkb21cIjogMTQzNDQ0XG4gIFwiVW5pdGVkIFN0YXRlc1wiOiAxNDM0NDFcbiAgVmVuZXp1ZWxhOiAxNDM1MDJcbiAgVmlldG5hbTogMTQzNDcxXG4gIEphcGFuOiAxNDM0NjJcbiAgXCJEb21pbmljYW4gUmVwdWJsaWNcIjogMTQzNTA4XG4gIEVjdWFkb3I6IDE0MzUwOVxuICBFZ3lwdDogMTQzNTE2XG4gIEVzdG9uaWE6IDE0MzUxOFxuICBIb25kdXJhczogMTQzNTEwXG4gIEphbWFpY2E6IDE0MzUxMVxuICBLYXpha2hzdGFuOiAxNDM1MTdcbiAgTGF0dmlhOiAxNDM1MTlcbiAgTGl0aHVhbmlhOiAxNDM1MjBcbiAgTWFjYXU6IDE0MzUxNVxuICBNYWx0YTogMTQzNTIxXG4gIE1vbGRvdmE6IDE0MzUyM1xuICBOaWNhcmFndWE6IDE0MzUxMlxuICBQYXJhZ3VheTogMTQzNTEzXG4gIFVydWd1YXk6IDE0MzUxNFxuXG5hcHBTdG9yZU9wdGlvbnMgPSBbXVxuZm9yIGtleSx2YWx1ZSBvZiBhcHBTdG9yZXNcbiAgYXBwU3RvcmVPcHRpb25zLnB1c2goe3RleHQ6a2V5LHZhbHVlOnZhbHVlfSlcblxuaU9TQXBwU2NoZW1hID0gW1xuICB7XG4gICAgZmllbGRUaXRsZTogXCJBcHBsaWNhdGlvbiBJRFwiXG4gICAgZmllbGROYW1lOlwiYXBwX2lkXCJcbiAgICBmaWVsZFR5cGU6XCJpbnB1dHRleHRcIlxuICAgIGZpZWxkVmFsdWU6XCJcIlxuICB9XG4gIHtcbiAgICBmaWVsZFRpdGxlOiBcIlRpdGxlXCJcbiAgICBmaWVsZE5hbWU6XCJ0aXRsZVwiXG4gICAgZmllbGRUeXBlOlwiaW5wdXR0ZXh0XCJcbiAgICBmaWVsZFZhbHVlOlwiXCJcbiAgfVxuICB7XG4gICAgZmllbGRUaXRsZTogXCJXZWJob29rIFVSTFwiXG4gICAgZmllbGROYW1lOlwid2ViaG9va191cmxcIlxuICAgIGZpZWxkVHlwZTpcImlucHV0dGV4dFwiXG4gICAgZmllbGRWYWx1ZTpcIlwiXG4gIH1cbiAge1xuICAgIGZpZWxkVGl0bGU6IFwiRGVzY3JpcHRpb25cIlxuICAgIGZpZWxkTmFtZTpcImNvbnRlbnRcIlxuICAgIGZpZWxkVHlwZTpcInRleHRhcmVhXCJcbiAgICBmaWVsZFZhbHVlOlwiXCJcbiAgfVxuICB7XG4gICAgZmllbGRUaXRsZTpcIlJlZ2lvblwiXG4gICAgZmllbGROYW1lOlwicmVnaW9uXCJcbiAgICBmaWVsZFR5cGU6XCJzZWxlY3RcIlxuICAgIG9wdGlvbnM6IGFwcFN0b3JlT3B0aW9uc1xuICAgIGZpZWxkVmFsdWU6XCJcIlxuICB9XG5dXG5cbnNjaGVtYXMgPVxuICBpb3NhcHA6XG4gICAgc2NoZW1hOmlPU0FwcFNjaGVtYVxuICAgIG1vZGVsTmFtZTogXCJpb3NhcHBcIlxuICAgIGFwaUVuZHBvaW50OiBcIi9hZG1pbi9hcGkvdjEvaW9zYXBwXCJcbiAgICBmb3JtVGl0bGU6XCJBcHBTdG9yZSBBcHAgc2V0dGluZ3NcIlxuICAgIGZvcm1EZXNjcmlwdGlvbjpcIldoZW4gYSByZXZpZXcgaXMgcG9zdGVkIHRvIEFwcFN0b3JlLCBub3RpZmljYXRpb24gaXMgc2VuZCB0byB5b3VyIHNsYWNrIGNoYW5uZWxcIlxuIl19
